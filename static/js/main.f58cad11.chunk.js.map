{"version":3,"sources":["components/controls/d3/InsetShadow.tsx","components/controls/d3/Grid.tsx","components/controls/d3/Axis.tsx","components/controls/d3/Dots.tsx","components/controls/d3/Tooltip.tsx","components/controls/d3/Sparkline.tsx","components/controls/d3/ProgressChart.tsx","components/controls/d3/BarChart.tsx","components/controls/d3/DonutChartLegend.tsx","components/controls/d3/DonutChartPath.tsx","components/controls/d3/DonutChart.tsx","components/controls/d3/models.ts","components/dashboards/dashboards.tsx","services/endpoint-connection.ts","components/dashboards/sensors-dashboard.tsx","hooks/use-form-input.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["InsetShadow","this","props","chartId","stdDeviation","floodColor","floodOpacity","id","dx","dy","result","operator","in","in2","React","Grid","context","renderGrid","bind","grid","node","refs","d3","call","ref","className","Axis","renderAxis","axis","axisType","translate","h","transform","Dots","x","y","showTooltip","hideTooltip","data","newData","shift","pop","parser","circles","map","d","i","r","cx","date","cy","count","fill","stroke","strokeWidth","onMouseOver","onMouseOut","Tooltip","tooltip","display","width","height","transformArrow","position","pos","isNaN","console","info","Math","round","rx","ry","opacity","points","textAnchor","fontSize","key","value","Sparkline","state","prevProps","init","line","getSparklineInfos","path","pathSparkline","JSON","stringify","attr","exit","remove","enter","append","classed","merge","length","transition","duration","on","element","attributes","removeNamedItem","margin","w","domain","rangeRound","range","curve","alpha","e","setState","target","getAttribute","setAttribute","format","xAxis","tickFormat","tickValues","splice","ticks","yAxis","yGrid","tickSizeInner","strokeLinecap","ProgressChart","currentPercent","outerRadius","innerRadius","arcLine","cornerRadius","startAngle","select","selectAll","color","filter","attrTween","endAngle","PI","percent","interpolate","t","arc","fillOpacity","brighter","toString","style","fontColor","floor","BarChart","month","padding","layout","rect1","rect2","bandwidth","DonutChartLegend","pie","legend","trsf","rectStyle","textStyle","name","DonutChartPath","currentData","each","DonutChart","padAngle","sort","SparklineModel","EndpointConnection","url","options","connection","connectedCallbacks","HubConnectionBuilder","withAutomaticReconnect","withUrl","build","startInternal","start","forEach","c","apply","connectionId","stop","commandId","newMethod","off","arg","invoke","send","callback","onclose","onreconnecting","onreconnected","push","methodName","args","stream","SensorsDashboard","ip","initialState","setValue","onChange","useFormInput","useState","endpointConnection","setEndpointConnection","HubConnectionState","Disconnected","connectionState","setConnectionState","temparatures","_setTemparatures","temperaturesRef","useRef","a","onconnected","command","current","slice","max","Date","now","error","sparklineSize","setSparklineSize","donutchartSize","setDonutchartSize","progresschartSize","setProgresschartSize","sparkline","donutchart","progresschart","handler","offsetWidth","offsetHeight","useEffect","window","addEventListener","removeEventListener","type","disabled","onClick","ev","widgets","barchart","renderWidgets","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f58cad11.chunk.js","sourcesContent":["import * as React from \"react\";\n\ntype Props = {\n  chartId: any;\n  stdDeviation: any;\n  floodColor: any;\n  floodOpacity: any;\n};\n\ntype State = {\n  /* empty */\n};\n\nexport class InsetShadow extends React.Component<Props, State> {\n  render() {\n    const { chartId, stdDeviation, floodColor, floodOpacity } = this.props;\n    return (\n      <defs>\n        <filter id={chartId}>\n          <feOffset dx=\"0\" dy=\"0\" />\n          <feGaussianBlur stdDeviation={stdDeviation} result=\"offset-blur\" />\n          <feComposite\n            operator=\"out\"\n            in=\"SourceGraphic\"\n            in2=\"offset-blur\"\n            result=\"inverse\"\n          />\n          <feFlood\n            floodColor={floodColor}\n            floodOpacity={floodOpacity}\n            result=\"color\"\n          />\n          <feComposite operator=\"in\" in=\"color\" in2=\"inverse\" result=\"shadow\" />\n          <feComposite operator=\"over\" in=\"shadow\" in2=\"SourceGraphic\" />\n        </filter>\n      </defs>\n    );\n  }\n}\n","import * as d3 from \"d3\";\nimport * as React from \"react\";\n\ntype Props = {\n  grid: any;\n};\n\ntype State = {\n  /* empty */\n};\n\nexport class Grid extends React.Component<Props | undefined, State> {\n  constructor(props?: Props, context?: any) {\n    super(props, context);\n    this.renderGrid = this.renderGrid.bind(this);\n  }\n\n  componentDidMount() {\n    this.renderGrid();\n  }\n  componentDidUpdate() {\n    this.renderGrid();\n  }\n\n  renderGrid() {\n    const { grid } = this.props;\n\n    let node = this.refs.grid as d3.BaseType;\n    d3.select(node).call(grid);\n  }\n\n  render() {\n    return <g ref=\"grid\" className=\"y-grid\" />;\n  }\n}\n","import * as d3 from \"d3\";\nimport * as React from \"react\";\n\ntype Props = {\n  h: number;\n  axis: any;\n  axisType: any;\n};\n\ntype State = {\n  /* empty */\n};\n\nexport class Axis extends React.Component<Props | undefined, State> {\n  constructor(props: Props, context?: any) {\n    super(props, context);\n    this.renderAxis = this.renderAxis.bind(this);\n  }\n\n  componentDidMount() {\n    this.renderAxis();\n  }\n  componentDidUpdate() {\n    this.renderAxis();\n  }\n\n  renderAxis() {\n    const { axis } = this.props;\n\n    let node = this.refs.axis as d3.BaseType;\n    d3.select(node).call(axis);\n  }\n\n  render() {\n    const { axisType, h } = this.props;\n\n    let translate = \"translate(0,\" + h + \")\";\n    return (\n      <g\n        ref=\"axis\"\n        className=\"axis\"\n        transform={axisType === \"x\" ? translate : \"\"}\n      />\n    );\n  }\n}\n","import * as d3 from \"d3\";\nimport * as React from \"react\";\n\ntype Props = {\n  hideTooltip: any;\n  showTooltip: any;\n  y: any;\n  x: any;\n  data: any;\n};\n\ntype State = {\n  /* empty */\n};\n\nexport class Dots extends React.Component<Props | undefined, State> {\n\n  render() {\n    const { x, y, showTooltip, hideTooltip, data } = this.props;\n    // Copy data in a new array\n    let newData = [...data];\n\n    // Remove last & first point\n    newData.shift();\n    newData.pop();\n\n    const parser = d3.timeFormat(\"%B %d, %Y\");\n\n    const circles = newData.map((d, i) => {\n      return (\n        <circle\n          className=\"dot\"\n          r=\"5\"\n          cx={x(d.date)}\n          cy={y(d.count)}\n          fill=\"#7dc7f4\"\n          stroke=\"#313131\"\n          strokeWidth=\"1px\"\n          key={i}\n          onMouseOver={showTooltip}\n          onMouseOut={hideTooltip}\n          data-key={parser(d.date)}\n          data-value={d.count}\n        />\n      );\n    });\n\n    return <g>{circles}</g>;\n  }\n}\n","import * as React from \"react\";\n\ntype Props = {\n  tooltip: any;\n};\n\ntype State = {};\n\nexport class Tooltip extends React.Component<Props, State> {\n  render() {\n    const { tooltip } = this.props;\n    if (!tooltip.display) return null;\n\n    let transform = \"\",\n      x = 0,\n      y = 0,\n      width = 150,\n      height = 70,\n      transformText = \"translate(\" + width / 2 + \",\" + (height / 2 - 5) + \")\",\n      transformArrow = \"\";\n\n    let position = tooltip.pos;\n    if (isNaN(position.x)) {\n      console.info(\"Dupa\");\n    }\n    x = position.x;\n    y = position.y;\n\n    if (y > height + 102) {\n      transform =\n        \"translate(\" + (x - width / 2) + \",\" + (y - height - 20) + \")\";\n      transformArrow =\n        \"translate(\" + (width / 2 - 20) + \",\" + (height - 2) + \")\";\n    } else if (y < height + 102) {\n      transform =\n        \"translate(\" + (x - width / 2) + \",\" + (Math.round(y) + 20) + \")\";\n      transformArrow =\n        \"translate(\" + (width / 2 - 20) + \",\" + 0 + \") rotate(180,20,0)\";\n    }\n\n    return (\n      <g transform={transform} className=\"svg-tooltip\">\n        <rect\n          className=\"shadow\"\n          width={width}\n          height={height}\n          rx=\"5\"\n          ry=\"5\"\n          fill=\"rgb(125, 199, 244)\"\n          opacity=\".9\"\n        />\n        <polygon\n          className=\"shadow\"\n          points=\"10,0  30,0  20,10\"\n          transform={transformArrow}\n          fill=\"rgb(125, 199, 244)\"\n          opacity=\".9\"\n        />\n        <text transform={transformText}>\n          <tspan x=\"0\" textAnchor=\"middle\" fontSize=\"15px\" fill=\"#ffffff\">\n            {tooltip.data.key}\n          </tspan>\n          <tspan\n            x=\"0\"\n            textAnchor=\"middle\"\n            dy=\"25\"\n            fontSize=\"20px\"\n            fill=\"#a9f3ff\"\n          >\n            {tooltip.data.value + \" visits\"}\n          </tspan>\n        </text>\n      </g>\n    );\n  }\n}\n","import * as d3 from \"d3\";\nimport * as React from \"react\";\nimport { Axis, Dots, Grid, Tooltip } from \"./\";\n\ntype Props = {\n  chartId: any;\n  width: any;\n  height: any;\n  data: Array<any>;\n};\n\ntype State = {\n  tooltip: any;\n};\n\nexport class Sparkline extends React.Component<Props | undefined, State> {\n  constructor(props?: Props, context?: any) {\n    super(props, context);\n\n    this.showTooltip = this.showTooltip.bind(this);\n    this.hideTooltip = this.hideTooltip.bind(this);\n\n    this.state = {\n      tooltip: {\n        display: false,\n        data: {\n          key: \"\",\n          value: \"\",\n        },\n        pos: {},\n      },\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const { width, height, data } = this.props;\n\n    let init = false;\n    const { line } = this.getSparklineInfos(width, height, data);\n\n    let path: any = d3\n      .select(this.refs.pathSparkline as d3.BaseType)\n      .data([data]);\n\n    // Avoid complete redraw when resizing\n    let dataEqual = JSON.stringify(data) === JSON.stringify(prevProps.data);\n    if (dataEqual) {\n      if (prevProps.width && width !== prevProps.width) {\n        // Resizing\n        path.attr(\"d\", line);\n        return;\n      } else if (!prevProps.width) {\n        // Init\n        init = true;\n      }\n      // If tooltip or stuff and not init\n      if (!init) return;\n    }\n    // Else the data changed\n    path.exit().remove();\n\n    path\n      .enter()\n      .append(\"path\")\n      .classed(\"sparkline\", true)\n      .merge(path)\n      .attr(\"d\", line)\n      .attr(\"stroke-dasharray\", (x) => x.length)\n      .attr(\"stroke-dashoffset\", (x) => x.length)\n      .transition()\n      .duration(2000)\n      .attr(\"stroke-dashoffset\", \"0\")\n      .on(\"end\", (data, x, element) => {\n        // // Responsiveness (A bit dirty, may find another way to remove via path or react)\n        (element[0] as any).attributes.removeNamedItem(\"stroke-dasharray\");\n        (element[0] as any).attributes.removeNamedItem(\"stroke-dashoffset\");\n      });\n  }\n\n  getSparklineInfos(width, height, data: Array<{ date; count }>) {\n    const margin = { top: 5, right: 50, bottom: 20, left: 50 },\n      w = width - (margin.left + margin.right),\n      h = height - (margin.top + margin.bottom);\n\n    const transform = \"translate(\" + margin.left + \",\" + margin.top + \")\";\n\n    const x = d3\n      .scaleTime()\n      .domain(d3.extent(data, (d) => d.date))\n      .rangeRound([0, w]);\n    const y = d3\n      .scaleLinear()\n      .domain([\n        d3.min(data, (d) => d.count - 1),\n        d3.max(data, (d) => d.count + 1),\n      ])\n      .range([h, 0]);\n    const line = d3\n      .line()\n      .x((d) => x((d as any).date))\n      .y((d) => y((d as any).count))\n      .curve(d3.curveCatmullRom.alpha(0.5));\n\n    return { h, x, y, w, line, transform };\n  }\n  showTooltip(e) {\n    this.setState({\n      tooltip: {\n        display: true,\n        data: {\n          key: e.target.getAttribute(\"data-key\"),\n          value: e.target.getAttribute(\"data-value\"),\n        },\n        pos: {\n          x: e.target.getAttribute(\"cx\"),\n          y: e.target.getAttribute(\"cy\"),\n        },\n      },\n    });\n  }\n  hideTooltip(e) {\n    e.target.setAttribute(\"fill\", \"#7dc7f4\");\n\n    this.setState({\n      tooltip: {\n        display: false,\n        data: {\n          key: \"\",\n          value: \"\",\n        },\n        pos: {},\n      },\n    });\n  }\n\n  render() {\n    const { chartId, width, height, data } = this.props;\n    const { tooltip } = this.state;\n\n    const { h, x, y, w, transform } = this.getSparklineInfos(\n      width,\n      height,\n      data\n    );\n    const format = d3.timeFormat(\"%H:%M:%S\");\n    const xAxis = d3\n      .axisBottom(x)\n      .tickFormat((d)=> format(d as Date)) \n      .tickValues(data.map((d, i) => (i > 0 ? d.date : null)).splice(1))\n      .ticks(5);\n    const yAxis = d3.axisLeft(y).ticks(5);\n    const yGrid = d3\n      .axisLeft(y)\n      .ticks(5)\n      .tickSizeInner(-w)\n      .tickFormat(\"\" as any);\n\n    return (\n      <svg ref=\"Sparkline\" id={chartId} width={width} height={height}>\n        <g transform={transform}>\n          <path\n            ref=\"pathSparkline\"\n            className=\"line shadow\"\n            strokeLinecap=\"round\"\n          />\n          <Dots\n            data={data}\n            x={x}\n            y={y}\n            showTooltip={this.showTooltip}\n            hideTooltip={this.hideTooltip}\n          />\n          <Tooltip tooltip={tooltip} />\n          <Grid grid={yGrid} />\n          <Axis h={h} axis={yAxis} axisType=\"y\" />\n          <Axis h={h} axis={xAxis} axisType=\"x\" />\n        </g>\n      </svg>\n    );\n  }\n}\n","import * as d3 from \"d3\";\nimport * as React from \"react\";\nimport { InsetShadow } from \"./\";\n\ntype Props = {\n  chartId: any;\n  width: any;\n  height: any;\n  data: any;\n};\n\ntype State = {\n  /* empty */\n};\n\nexport class ProgressChart extends React.Component<Props | undefined, State> {\n  currentPercent: number;\n  constructor(props?: Props, context?: any) {\n    super(props, context);\n    this.currentPercent = 0;\n  }\n\n  componentDidUpdate() {\n    const { width, height, data } = this.props;\n    const outerRadius = height / 2 - 10;\n    const innerRadius = outerRadius - 20;\n    const transform = \"translate(\" + width / 2 + \",\" + height / 2 + \")\";\n\n    const style2 = { filter: \"url(#inset-shadow2)\" };\n    const arcLine = d3\n      .arc()\n      .innerRadius(innerRadius)\n      .outerRadius(outerRadius)\n      .cornerRadius(10)\n      .startAngle(-0.05);\n\n    let svg = d3.select(this.refs.ProgressChart as d3.BaseType);\n\n    let layout = svg.select(\"g\").attr(\"transform\", transform);\n\n    let path: any = layout.selectAll(\"path.arcLine\").data(data, 0 as any);\n\n    path.exit().remove();\n\n    path\n      .enter()\n      .append(\"path\")\n      .attr(\"fill\", (d) => (d as any).color[1])\n      .attr(\"class\", \"arcLine\")\n      .attr(\"style\", style2 as any)\n      .merge(path)\n      .transition()\n      .duration(2000)\n      .attrTween(\"d\", (d) => {\n        let endAngle = 2 * Math.PI * (d as any).percent;\n        let interpolate = d3.interpolate(\n          { endAngle: this.currentPercent },\n          { endAngle: endAngle }\n        ) as any;\n        this.currentPercent = endAngle;\n        return function (t) {\n          return arcLine(interpolate(t));\n        };\n      });\n  }\n\n  render() {\n    const { chartId, width, height, data } = this.props;\n\n    const styleText = { fontSize: \"40px\", fontColor: \"#99d5e6\" };\n    const style1 = { filter: \"url(#inset-shadow1)\" };\n\n    const outerRadius = height / 2 - 10;\n    const innerRadius = outerRadius - 20;\n\n    const arc = d3\n      .arc()\n      .innerRadius(innerRadius)\n      .outerRadius(outerRadius)\n      .startAngle(0)\n      .endAngle(2 * Math.PI) as any;\n\n    return (\n      <div>\n        <svg ref=\"ProgressChart\" id={chartId} width={width} height={height}>\n          <g>\n            <InsetShadow\n              chartId=\"inset-shadow1\"\n              stdDeviation=\"15\"\n              floodColor=\"black\"\n              floodOpacity=\".5\"\n            />\n            <InsetShadow\n              chartId=\"inset-shadow2\"\n              stdDeviation=\"15\"\n              floodColor=\"white\"\n              floodOpacity=\".8\"\n            />\n            <circle\n              r={innerRadius}\n              cx=\"0\"\n              cy=\"0\"\n              fill={data[0].color[2]}\n              fillOpacity=\"0.5\"\n            />\n            <text\n              textAnchor=\"middle\"\n              dy=\"15\"\n              dx=\"5\"\n              fill={d3\n                .rgb((data[0] as any).color[1] as any)\n                .brighter(2)\n                .toString()}\n              style={styleText}\n            >\n              {Math.floor(data[0].percent * 100) + \"%\"}\n            </text>\n            <path\n              className=\"backgroundProgress\"\n              fill={data[0].color[0]}\n              d={arc()}\n              style={style1}\n            />\n          </g>\n        </svg>\n      </div>\n    );\n  }\n}\n","import * as d3 from \"d3\";\nimport * as React from \"react\";\n\ntype Props = {\n  chartId: any;\n  width: any;\n  height: any;\n  data: any;\n};\n\ntype State = {\n  /* empty */\n};\n\nexport class BarChart extends React.Component<Props, State> {\n  componentDidUpdate() {\n    const { width, height, data } = this.props;\n\n    const margin = { top: 5, right: 5, bottom: 5, left: 5 },\n      h = height - (margin.top + margin.bottom);\n    const transform = \"translate(\" + margin.left + \",\" + margin.top + \")\";\n\n    const x = d3\n      .scaleBand()\n      .domain(\n        data.map((d) => {\n          return d.month;\n        })\n      )\n      .rangeRound([0, width])\n      .padding(0.5);\n    const y = d3.scaleLinear().domain([0, 100]).rangeRound([height, 0]);\n\n    // Select main SVG\n    let svg = d3.select(this.refs.BarChart as d3.BaseType);\n\n    let layout = svg.select(\"g\").attr(\"transform\", transform);\n\n    let rect1: any = layout.selectAll(\"rect.behind\").data(data);\n    let rect2: any = layout.selectAll(\"rect.shadow\").data(data);\n\n    rect1.exit().remove();\n    rect2.exit().remove();\n\n    rect1\n      .enter()\n      .append(\"rect\")\n      .attr(\"fill\", \"#58657f\")\n      .attr(\"rx\", \"3\")\n      .attr(\"ry\", \"3\")\n      .attr(\"class\", \"behind\")\n      .attr(\"key\", (d, i) => \"behind-\" + i)\n      .attr(\"y\", margin.top - margin.bottom)\n      .attr(\"height\", h)\n      .merge(rect1)\n      .attr(\"x\", (d) => x((d as any).month))\n      .attr(\"width\", x.bandwidth());\n\n    rect2\n      .enter()\n      .append(\"rect\")\n      .attr(\"fill\", \"#74d3eb\")\n      .attr(\"rx\", \"3\")\n      .attr(\"ry\", \"3\")\n      .attr(\"class\", \"shadow\")\n      .attr(\"key\", (d, i) => \"shadow-\" + i)\n      .attr(\"y\", (d) => y((d as any).value) + (h - y((d as any).value)))\n      .attr(\"height\", 0)\n      .merge(rect2)\n      .attr(\"x\", (d) => x((d as any).month))\n      .attr(\"width\", x.bandwidth())\n      .transition()\n      .duration(2000)\n      .attr(\"height\", (d) => h - y((d as any).value))\n      .attr(\"y\", (d) => y((d as any).value));\n  }\n\n  render() {\n    const { chartId, width, height } = this.props;\n\n    return (\n      <svg ref=\"BarChart\" id={chartId} width={width} height={height}>\n        <g />\n      </svg>\n    );\n  }\n}\n","import * as React from \"react\";\n\ntype Props = {\n  width: number;\n  height: any;\n  pie: any;\n  data: any;\n};\n\ntype State = {\n  /* empty */\n};\n\nexport class DonutChartLegend extends React.Component<Props, State> {\n  render() {\n    const { width, height, pie, data } = this.props;\n    // Responsive: don't show legend if too small\n    if (width <= height + 180) return null;\n\n    const transform = \"translate(\" + width / 1.25 + \", 55)\";\n\n    const legend = pie(data).map((d, i) => {\n      const trsf = \"translate(10,\" + i * 30 + \")\";\n      const rectStyle = { fill: d.data.color, stroke: d.data.color };\n      const textStyle = { fill: d.data.color };\n\n      return (\n        <g transform={trsf} key={i}>\n          <rect width=\"20\" height=\"20\" style={rectStyle} rx=\"2\" ry=\"2\" />\n          <text x=\"30\" y=\"15\" className=\"browser-legend\" style={textStyle}>\n            {d.data.name}\n          </text>\n        </g>\n      );\n    });\n\n    return <g transform={transform}>{legend}</g>;\n  }\n}\n","import * as d3 from \"d3\";\nimport * as React from \"react\";\n\ntype Props = {\n  width: number;\n  height: any;\n  pie: any;\n  data: any;\n};\n\ntype State = {\n  /* empty */\n};\n\nexport class DonutChartPath extends React.Component<Props | undefined, State> {\n  currentData: any;\n  constructor(props?: Props, context?: any) {\n    super(props, context);\n    this.currentData = {};\n  }\n  componentDidUpdate() {\n    const { width, height, pie, data } = this.props;\n\n    const outerRadius = height / 2;\n    const innerRadius = height / 3.3;\n    const legendDisplayed = width <= height + 180 ? 0 : width / 5;\n    const transform =\n      \"translate(\" + (width / 2 - legendDisplayed) + \",\" + height / 2 + \")\";\n\n    const arc = d3.arc().outerRadius(outerRadius).innerRadius(innerRadius);\n\n    let layout = d3\n      .select(this.refs.DonutChartPath as d3.BaseType)\n      .attr(\"transform\", transform);\n\n    let path: any = layout.selectAll(\"path\").data(pie(data));\n\n    path.exit().remove();\n\n    path\n      .enter()\n      .append(\"path\")\n      .attr(\"fill\", (d) => (d as any).data.color)\n      .attr(\"key\", (d, i) => i)\n      .each(\n        (d) =>\n          (this.currentData[(d as any).data.name] = {\n            startAngle: (d as any).startAngle,\n            endAngle: (d as any).startAngle,\n          })\n      )\n      .merge(path)\n      .transition()\n      .duration(2000)\n      .attrTween(\"d\", (d) => {\n        let interpolate = d3.interpolate(\n          this.currentData[(d as any).data.name],\n          d\n        ) as any;\n        this.currentData[(d as any).data.name] = d;\n        return function (t) {\n          return arc(interpolate(t));\n        };\n      });\n  }\n\n  render() {\n    return <g ref=\"DonutChartPath\" />;\n  }\n}\n","import * as d3 from \"d3\";\nimport * as React from \"react\";\nimport { DonutChartLegend } from \"./DonutChartLegend\";\nimport { DonutChartPath } from \"./DonutChartPath\";\n\ntype Props = {\n  chartId: any;\n  width: any;\n  height: any;\n  data: any;\n};\n\ntype State = {};\n\nexport class DonutChart extends React.Component<Props, State> {\n  render() {\n    const { chartId, width, height, data } = this.props;\n    const pie = d3\n      .pie()\n      .value((d) => (d as any).count)\n      .padAngle(0.04)\n      .sort(null);\n\n    return (\n      <svg id={chartId} width={width} height={height}>\n        <DonutChartPath width={width} height={height} pie={pie} data={data} />\n        <DonutChartLegend pie={pie} data={data} width={width} height={height} />\n      </svg>\n    );\n  }\n}\n","\nexport class SparklineModel {\n    count : number;\n    date: Date;\n    constructor(count: number, date: Date){\n      this.count = count;\n      this.date = date;\n    }\n  }\n  ","import * as React from 'react';\nimport './style.css';\n\n\nexport class Dashboards extends React.Component  {\n  render() {\n    const { children } = this.props;\n    return (\n      <div className=\"main\">\n        <div className=\"content\">\n          {children}\n        </div>\n      </div>\n    );\n  }\n}\n","import {\n  HubConnection,\n  HubConnectionBuilder,\n  HubConnectionState,\n  IHttpConnectionOptions,\n  IStreamResult,\n} from \"@microsoft/signalr\";\n\nexport class EndpointConnection {\n  private readonly connection: HubConnection;\n  private connectedCallbacks: Array<(connectionId?: string) => void>;\n  constructor(url: string, options: IHttpConnectionOptions = {}) {\n    this.connection = new HubConnectionBuilder()\n      .withAutomaticReconnect()\n      .withUrl(url, options)\n      .build();\n    this.connectedCallbacks = [];\n  }\n\n  get state(): HubConnectionState {\n    return this.connection.state;\n  }\n\n  start(): Promise<void> {\n    return this.startInternal();\n  }\n\n  private async startInternal(): Promise<void> {\n    await this.connection.start();\n    this.connectedCallbacks.forEach((c) =>\n      c.apply(this, [this.connection.connectionId!])\n    );\n  }\n\n  stop(): Promise<void> {\n    return this.connection.stop();\n  }\n\n  on(commandId: string, newMethod: (...args: any[]) => void): void {\n    this.connection.on(commandId, newMethod);\n    //return this.connection.invoke(\"AddToGroupAsync\", commandId);\n  }\n\n  off(commandId: string): void {\n    this.connection.off(commandId);\n    //return this.connection.invoke(\"RemoveFromGroupAsync\", commandId);\n  }\n\n  get<T = any>(commandId: string, arg: any): Promise<T> {\n    return this.connection.invoke(\"GetAsync\", commandId, arg);\n  }\n\n  post(commandId: string, arg: any): Promise<void> {\n    return this.connection.send(\"PostAsync\", commandId, arg);\n  }\n\n  onclose(callback: (error?: Error) => void): void {\n    this.connection.onclose(callback);\n  }\n\n  onreconnecting(callback: (error?: Error) => void): void {\n    this.connection.onreconnecting(callback);\n  }\n\n  onreconnected(callback: (connectionId?: string) => void): void {\n    this.connection.onreconnected(callback);\n  }\n\n  onconnected(callback: (connectionId?: string) => void): void {\n    if (callback) {\n      this.connectedCallbacks.push(callback);\n      this.connection.onreconnected(callback);\n    }\n  }\n\n  stream<T = any>(methodName: string, ...args: any[]): IStreamResult<T> {\n    return this.connection.stream(methodName, ...args);\n  }\n}\n","import { HubConnectionState } from \"@microsoft/signalr\";\nimport React, { useRef } from \"react\";\nimport { useFormInput } from \"../../hooks\";\nimport { EndpointConnection } from \"../../services\";\nimport {\n  BarChart,\n  DonutChart,\n  ProgressChart,\n  Sparkline,\n  SparklineModel,\n} from \"../controls/d3\";\nimport \"./style.css\";\n\nexport const SensorsDashboard: React.FC = (props) => {\n  const ip = useFormInput(\"http://localhost:5009\");\n  const [endpointConnection, setEndpointConnection] =\n    React.useState<EndpointConnection>(null!);\n  const [connectionState, setConnectionState] =\n    React.useState<HubConnectionState>(HubConnectionState.Disconnected);\n  const [temparatures, _setTemparatures] = React.useState<SparklineModel[]>([]);\n  // const inputCommand = useFormInput(`\n  // {\n  //   \"CustomerName\": \"ProconTEL team\"\n  // }`);\n\n  const temperaturesRef = React.useRef(temparatures);\n  const setTemperatures = (data: SparklineModel[]) => {\n    temperaturesRef.current = data;\n    _setTemparatures(data);\n  };\n  //   const createOrder = async () => {\n  //     setLogs([`Sending POST command: ${JSON.stringify(inputCommand.value)}.`]);\n  //     endpointConnection\n  //         .post('create_order', JSON.parse(inputCommand.value))\n  //         .then(x => setLogs([...stateRef.current, 'Command sent.']));\n  // }\n\n  // const getOrder = async () => {\n  //     setLogs([`Sending GET command: ${JSON.stringify(inputCommand)}.`]);\n  //     endpointConnection\n  //         .get('create_order_sync', JSON.parse(inputCommand.value))\n  //         .then(x => setLogs([...stateRef.current, `Received: ${JSON.stringify(x)}.`]));\n  // }\n\n  const start = async () => {\n    const connection = new EndpointConnection(ip.value + \"/hubs/commands/\");\n   \n    connection.onconnected((x) => setConnectionState(connection.state));\n    connection.onclose((x) => setConnectionState(connection.state));\n    connection.onreconnected((x) => setConnectionState(connection.state));\n    connection.onreconnecting((x) => setConnectionState(connection.state));\n    connection.onconnected((id) => {\n      connection.off(\"onTemperature\");\n      connection.on(\"onTemperature\", (command: number) => {\n        setTemperatures([\n          ...temperaturesRef.current.slice(\n            Math.max(temperaturesRef.current.length - 20, 0)\n          ),\n          new SparklineModel(command as number, new Date(Date.now())),\n        ]);\n      });\n    });\n    try {\n      await connection.start();\n    } catch (err) {\n      console.error(err);\n    }\n    setEndpointConnection(connection);\n  };\n\n  const stop = async () => {\n    await endpointConnection.stop();\n  };\n  const [sparklineSize, setSparklineSize] = React.useState({\n    height: 300,\n    width: 400,\n  });\n  const [donutchartSize, setDonutchartSize] = React.useState({\n    height: 200,\n    width: 200,\n  });\n  const [progresschartSize, setProgresschartSize] = React.useState({\n    height: 200,\n    width: 200,\n  });\n  const sparkline = useRef<HTMLDivElement>(null);\n  const donutchart = useRef<HTMLDivElement>(null);\n  const progresschart = useRef<HTMLDivElement>(null);\n  const handler = () => {\n    if (sparkline) {\n      setSparklineSize({\n        width: sparkline.current.offsetWidth,\n        height: sparkline.current.offsetHeight - 100,\n      });\n    }\n\n    if (donutchart) {\n      setDonutchartSize({\n        width: donutchart.current.offsetWidth,\n        height: donutchart.current.offsetHeight - 100,\n      });\n    }\n\n    if (progresschart) {\n      setProgresschartSize({\n        width: progresschart.current.offsetWidth,\n        height: progresschart.current.offsetHeight - 100,\n      });\n    }\n  };\n  React.useEffect(() => {\n    handler();\n  }, []);\n  React.useEffect(() => {\n    window.addEventListener(\"resize\", handler);\n    return () => {\n      window.removeEventListener(\"resize\", handler);\n    };\n  });\n\n  const widgets = {\n    data: {\n      barchart: [\n        { month: \"Jan\", value: 31 },\n        { month: \"Feb\", value: 33 },\n        { month: \"Mar\", value: 45 },\n        { month: \"Apr\", value: 56 },\n        { month: \"May\", value: 35 },\n        { month: \"Jun\", value: 87 },\n        { month: \"Jul\", value: 54 },\n        { month: \"Aug\", value: 32 },\n        { month: \"Sep\", value: 65 },\n        { month: \"Oct\", value: 47 },\n        { month: \"Nov\", value: 64 },\n        { month: \"Dec\", value: 84 },\n      ],\n      progresschart: [\n        { percent: 1 / 100, color: [\"#0288D1\", \"#99d5e6\", \"#01579B\"] },\n      ],\n    },\n  };\n  const printConnectionButton = () =>\n    connectionState && connectionState === \"Disconnected\" ? (\n      <button onClick={async (ev) => await start()}>Start</button>\n    ) : (\n      <button onClick={async (ev) => await stop()}>Stop</button>\n    );\n\n  const renderConnection = () => {\n    return (\n      <>\n        <label>Endpoint IP:</label>\n        <div>\n          <input\n            type=\"text\"\n            name=\"name\"\n            {...ip}\n            disabled={connectionState === \"Connected\"}\n          />\n          {printConnectionButton()}\n        </div>\n        {connectionState}\n      </>\n    );\n  };\n\n  const renderWidgets = (widgets: any) => {\n    return (\n      <div className=\"column-stretch\">\n        <div\n          className=\"widget column-stretch\"\n          id=\"top-line-chart\"\n          ref={sparkline}\n        >\n          <h3 className=\"title\"> Temperature</h3>\n          <Sparkline\n            chartId=\"sparkline_1\"\n            width={sparklineSize.width}\n            height={sparklineSize.height}\n            data={temparatures}\n          />\n        </div>\n        <div className=\"column-stretch\">\n          <div className=\"row-stretch\">\n            <div\n              className=\"widget column-stretch\"\n              id=\"browser\"\n              ref={donutchart}\n            >\n              <h3 className=\"title\"> Top5</h3>\n              <DonutChart\n                chartId=\"donutchart_1\"\n                width={\n                  donutchartSize.width > 40\n                    ? donutchartSize.width - 40\n                    : donutchartSize.width\n                }\n                height={donutchartSize.height}\n                data={[]}\n              />\n            </div>\n            <div\n              className=\"widget column-stretch\"\n              id=\"ret_visitors\"\n              ref={progresschart}\n            >\n              <h3 className=\"title\"> Effectiveness</h3>\n              <ProgressChart\n                chartId=\"progresschart_1\"\n                width={\n                  progresschartSize.width > 40\n                    ? progresschartSize.width - 40\n                    : progresschartSize.width\n                }\n                height={progresschartSize.height / 2}\n                data={widgets.data.progresschart}\n              />\n              <br />\n              <BarChart\n                chartId=\"barchart_1\"\n                width={\n                  progresschartSize.width > 40\n                    ? progresschartSize.width - 40\n                    : progresschartSize.width\n                }\n                height={progresschartSize.height / 2}\n                data={widgets.data.barchart}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  return (\n    <>\n      <div className=\"main\">\n        {renderConnection()}\n        <div className=\"content\">{renderWidgets(widgets)}</div>\n      </div>\n    </>\n  );\n};\n","import * as React from 'react';\n\nexport function useFormInput<T>(initialState: T) {\n  const [value, setValue] = React.useState(initialState);\n  const handleChange = (e: { target: { value: React.SetStateAction<T>; }; }) => {\n    setValue(e.target.value)\n  }\n  return {\n    value, \n    onChange: handleChange\n  }\n};\n","import React from 'react';\nimport './App.css';\nimport { SensorsDashboard } from './components';\n\n\nfunction App() {\n  return (\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n    //   </header>\n\n    // </div>\n    <div className=\"main\">\n    <div className=\"content\">\n    <SensorsDashboard />\n    </div>\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}