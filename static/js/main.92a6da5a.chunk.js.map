{"version":3,"sources":["hooks/use-form-input.tsx","components/controls/d3/InsetShadow.tsx","components/controls/d3/Grid.tsx","components/controls/d3/Axis.tsx","components/controls/d3/Dots.tsx","components/controls/d3/Tooltip.tsx","components/controls/d3/Sparkline.tsx","components/controls/d3/ProgressChart.tsx","components/controls/d3/BarChart.tsx","components/controls/d3/DonutChartPath.tsx","components/controls/d3/DonutChartLegend.tsx","components/controls/d3/DonutChart.tsx","components/controls/d3/models.ts","components/dashboards/needs-dashboard.tsx","components/dashboards/dashboards.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useFormInput","initialState","React","value","setValue","onChange","e","target","InsetShadow","this","props","chartId","stdDeviation","floodColor","floodOpacity","id","dx","dy","result","operator","in","in2","Grid","context","renderGrid","bind","grid","node","refs","d3","call","ref","className","Axis","renderAxis","axis","axisType","translate","h","transform","Dots","x","y","showTooltip","hideTooltip","data","newData","shift","pop","parser","circles","map","d","i","r","cx","date","cy","count","fill","stroke","strokeWidth","onMouseOver","onMouseOut","Tooltip","tooltip","display","width","height","transformArrow","position","pos","NaN","console","info","Math","round","rx","ry","opacity","points","textAnchor","fontSize","key","Sparkline","state","prevProps","init","line","getSparklineInfos","path","pathSparkline","JSON","stringify","attr","exit","remove","enter","append","classed","merge","length","transition","duration","on","element","attributes","removeNamedItem","margin","w","domain","rangeRound","range","curve","alpha","setState","getAttribute","setAttribute","xAxis","tickValues","splice","ticks","yAxis","yGrid","tickSizeInner","tickFormat","strokeLinecap","ProgressChart","currentPercent","outerRadius","innerRadius","arcLine","cornerRadius","startAngle","select","selectAll","color","filter","attrTween","endAngle","PI","percent","interpolate","t","arc","fillOpacity","brighter","toString","style","fontColor","floor","BarChart","month","padding","layout","rect1","rect2","bandwidth","DonutChartPath","currentData","pie","each","name","DonutChartLegend","legend","trsf","rectStyle","textStyle","DonutChart","padAngle","sort","SparklineModel","NeedsDashboard","ip","useState","EndpointConnectionFactory","factory","endpointConnection","setEndpointConnection","HubConnectionState","Disconnected","connectionState","setConnectionState","logs","_setLogs","stateRef","useRef","start","a","connection","create","onconnected","onclose","onreconnected","onreconnecting","off","command","current","error","stop","sparklineSize","setSparklineSize","donutchartSize","setDonutchartSize","progresschartSize","setProgresschartSize","sparkline","donutchart","progresschart","handler","offsetWidth","offsetHeight","useEffect","window","addEventListener","removeEventListener","widgets","barchart","Date","type","disabled","onClick","ev","item","idx","renderWidgets","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.92a6da5a.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\nexport function useFormInput<T>(initialState: T) {\r\n  const [value, setValue] = React.useState(initialState);\r\n  const handleChange = (e: { target: { value: React.SetStateAction<T>; }; }) => {\r\n    setValue(e.target.value)\r\n  }\r\n  return {\r\n    value, \r\n    onChange: handleChange\r\n  }\r\n};\r\n","import * as d3 from 'd3'\r\nimport * as React from 'react';\r\nimport * as classNames from 'classnames';\r\n\r\n type Props ={\r\n    chartId: any;\r\n    stdDeviation: any;\r\n    floodColor: any;\r\n    floodOpacity: any;\r\n  }\r\n\r\n  type State= {\r\n    /* empty */\r\n  }\r\n\r\nexport class InsetShadow extends React.Component<Props, State> {\r\n\r\nrender(){\r\n  const { chartId, stdDeviation, floodColor, floodOpacity } = this.props\r\n  return (\r\n    <defs>\r\n      <filter id={chartId}>\r\n        <feOffset dx=\"0\" dy=\"0\"/>\r\n        <feGaussianBlur stdDeviation={stdDeviation} result=\"offset-blur\"/>\r\n        <feComposite operator=\"out\" in=\"SourceGraphic\" in2=\"offset-blur\" result=\"inverse\"/>\r\n        <feFlood floodColor={floodColor} floodOpacity={floodOpacity} result=\"color\"/>\r\n        <feComposite operator=\"in\" in=\"color\" in2=\"inverse\" result=\"shadow\"/>\r\n        <feComposite operator=\"over\" in=\"shadow\" in2=\"SourceGraphic\"/>\r\n      </filter>\r\n    </defs>\r\n  )\r\n}\r\n}","import * as d3 from 'd3'\r\nimport * as React from 'react';\r\nimport * as classNames from 'classnames';\r\n\r\n\r\n  type Props = {\r\n    grid: any;\r\n  }\r\n\r\n  type State= {\r\n    /* empty */\r\n  }\r\n\r\nexport class Grid extends React.Component<Props| undefined, State> {\r\n\r\n  constructor(props?: Props, context?: any) {\r\n    super(props, context);\r\n    this.renderGrid = this.renderGrid.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.renderGrid()\r\n  }\r\n  componentDidUpdate() {\r\n    this.renderGrid()\r\n  }\r\n\r\n  renderGrid() {\r\n    const { grid } = this.props\r\n\r\n    let node = this.refs.grid as d3.BaseType;\r\n    d3.select(node).call(grid)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <g ref=\"grid\" className=\"y-grid\"/>\r\n    )\r\n  }\r\n}\r\n\r\n","import * as d3 from 'd3'\r\nimport * as React from 'react';\r\nimport * as classNames from 'classnames';\r\n\r\n\r\ntype Props = {\r\n    h: number;\r\n    axis: any;\r\n    axisType: any;\r\n  }\r\n\r\n  type State= {\r\n    /* empty */\r\n  }\r\n\r\nexport class Axis extends React.Component<Props | undefined, State> {\r\n\r\n  constructor(props: Props, context?: any) {\r\n    super(props, context);\r\n    this.renderAxis = this.renderAxis.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.renderAxis()\r\n  }\r\n  componentDidUpdate() {\r\n    this.renderAxis()\r\n  }\r\n\r\n  renderAxis() {\r\n    const { axis } = this.props\r\n\r\n    let node = this.refs.axis as d3.BaseType;\r\n    d3.select(node).call(axis)\r\n  }\r\n\r\n  render() {\r\n    const { axisType, h } = this.props\r\n\r\n    let translate = 'translate(0,' + h + ')'\r\n    return (\r\n      <g ref=\"axis\" className=\"axis\" transform={axisType === 'x' ? translate : ''}/>\r\n    )\r\n  }\r\n}\r\n","import * as d3 from 'd3'\r\nimport * as React from 'react';\r\nimport * as classNames from 'classnames';\r\n\r\n\r\n  type Props = {\r\n    hideTooltip: any;\r\n    showTooltip: any;\r\n    y: any;\r\n    x: any;\r\n    data:any;\r\n  }\r\n\r\n  type State = {\r\n    /* empty */\r\n  }\r\n\r\nexport class Dots extends React.Component<Props| undefined, State> {\r\n\r\n  constructor(props?: Props, context?: any) {\r\n    super(props, context);\r\n  }\r\n\r\n  render() {\r\n    const { x, y, showTooltip,hideTooltip, data } = this.props\r\n  // Copy data in a new array\r\n  let newData = [...data]\r\n\r\n  // Remove last & first point\r\n  newData.shift()\r\n  newData.pop()\r\n\r\n  const parser = d3.timeFormat('%B %d, %Y')\r\n\r\n  const circles = newData.map((d, i) => {\r\n    return (\r\n      <circle\r\n        className=\"dot\"\r\n        r=\"7\"\r\n        cx={x(d.date)}\r\n        cy={y(d.count)}\r\n        fill=\"#7dc7f4\"\r\n        stroke=\"#313131\"\r\n        strokeWidth=\"5px\"\r\n        key={i}\r\n        onMouseOver={showTooltip}\r\n        onMouseOut={hideTooltip}\r\n        data-key={parser(d.date)}\r\n        data-value={d.count}/>\r\n    )\r\n  })\r\n\r\n  return <g>{circles}</g>\r\n}\r\n}\r\n","import * as d3 from 'd3'\r\nimport * as React from 'react';\r\nimport * as classNames from 'classnames';\r\n\r\n\r\n\r\n  type Props= {\r\n    tooltip: any;\r\n  }\r\n\r\n  type State= {\r\n  }\r\n\r\nexport class Tooltip extends React.Component<Props, State> {\r\n\r\nrender(){\r\n  const {tooltip} = this.props;\r\n  if (!tooltip.display) return null\r\n\r\n  let transform = '',\r\n    x = 0,\r\n    y = 0,\r\n    width = 150,\r\n    height = 70,\r\n    transformText = 'translate(' + width / 2 + ',' + (height / 2 - 5) + ')',\r\n    transformArrow = ''\r\n\r\n  let position = tooltip.pos\r\n  if(position.x == NaN)\r\n  {\r\n    console.info(\"Dupa\");\r\n  }\r\n  x = position.x\r\n  y = position.y\r\n\r\n  if (y > (height + 102)) {\r\n    transform = 'translate(' + (x - width / 2) + ',' + (y - height - 20) + ')'\r\n    transformArrow = 'translate(' + (width / 2 - 20) + ',' + (height - 2) + ')'\r\n  } else if (y < (height + 102)) {\r\n    transform = 'translate(' + (x - width / 2) + ',' + (Math.round(y) + 20) + ')'\r\n    transformArrow = 'translate(' + (width / 2 - 20) + ',' + 0 + ') rotate(180,20,0)'\r\n  }\r\n\r\n\r\n  return (\r\n    <g transform={transform} className=\"svg-tooltip\">\r\n      <rect className=\"shadow\" width={width} height={height} rx=\"5\" ry=\"5\" fill=\"rgb(125, 199, 244)\" opacity=\".9\"/>\r\n      <polygon\r\n        className=\"shadow\"\r\n       points=\"10,0  30,0  20,10\"\r\n        transform={transformArrow}\r\n        fill=\"rgb(125, 199, 244)\" opacity=\".9\"/>\r\n      <text transform={transformText}>\r\n          <tspan x=\"0\" textAnchor=\"middle\" fontSize=\"15px\" fill=\"#ffffff\">{tooltip.data.key}</tspan>\r\n          <tspan x=\"0\" textAnchor=\"middle\" dy=\"25\" fontSize=\"20px\" fill=\"#a9f3ff\">{tooltip.data.value + ' visits'}</tspan>\r\n      </text>\r\n    </g>\r\n  )\r\n}\r\n}\r\n","import * as d3 from 'd3'\r\nimport * as React from 'react';\r\nimport * as classNames from 'classnames';\r\nimport { Grid, Axis, Dots, Tooltip, SparklineModel } from './';\r\n\r\n  type Props = {\r\n    chartId: any;\r\n    width: any;\r\n    height: any;\r\n    data: Array<any>;\r\n  }\r\n\r\n  type State  ={\r\n    tooltip:any;\r\n  }\r\n\r\nexport class Sparkline extends React.Component<Props| undefined, State> {\r\n\r\n  constructor(props?: Props, context?: any) {\r\n    super(props, context);\r\n\r\n    this.showTooltip = this.showTooltip.bind(this)\r\n    this.hideTooltip = this.hideTooltip.bind(this)\r\n\r\n    this.state = {\r\n      tooltip: {\r\n        display: false,\r\n        data: {\r\n          key: '',\r\n          value: ''\r\n        },\r\n        pos: {}\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { width, height, data } = this.props\r\n\r\n    let init = false\r\n    const { line } = this.getSparklineInfos(width, height, data)\r\n\r\n    let path: any = d3.select(this.refs.pathSparkline as d3.BaseType).data([data])\r\n\r\n    // Avoid complete redraw when resizing\r\n    let dataEqual = JSON.stringify(data) === JSON.stringify(prevProps.data)\r\n    if (dataEqual) {\r\n      if (prevProps.width && width !== prevProps.width) {\r\n        // Resizing\r\n        path.attr('d', line)\r\n        return\r\n      } else if (!prevProps.width) {\r\n        // Init\r\n        init = true\r\n      }\r\n      // If tooltip or stuff and not init\r\n      if (!init) return\r\n    }\r\n    // Else the data changed\r\n     path.exit().remove()\r\n\r\n    path.enter().append('path').classed('sparkline', true)\r\n      .merge(path)\r\n        .attr('d', line)\r\n        .attr('stroke-dasharray', (x) => x.length)\r\n        .attr('stroke-dashoffset', (x) => x.length)\r\n        .transition().duration(2000)\r\n          .attr('stroke-dashoffset', '0')\r\n          .on('end', (data, x , element) =>{\r\n            // // Responsiveness (A bit dirty, may find another way to remove via path or react)\r\n            (element[0] as any).attributes.removeNamedItem('stroke-dasharray');\r\n            (element[0] as any).attributes.removeNamedItem('stroke-dashoffset');\r\n          })\r\n  }\r\n\r\n  getSparklineInfos(width, height, data : Array<{date,count}>) {\r\n    const margin = { top: 5, right: 50, bottom: 20, left: 50 },\r\n      w = width - (margin.left + margin.right),\r\n      h = height - (margin.top + margin.bottom)\r\n\r\n    const transform = 'translate(' + margin.left + ',' + margin.top + ')'\r\n\r\n    const x = d3.scaleTime()\r\n      .domain(d3.extent(data, d => d.date))\r\n      .rangeRound([0, w])\r\n    const y = d3.scaleLinear()\r\n      .domain([d3.min(data, d => d.count - 1), d3.max(data, d => d.count + 1)])\r\n      .range([h, 0])\r\n    const line = d3.line()\r\n      .x(d => x((d as any).date))\r\n      .y(d => y((d as any).count))\r\n      .curve(d3.curveCatmullRom.alpha(0.5))\r\n\r\n    return { h, x, y, w, line, transform }\r\n  }\r\n  showTooltip(e) {\r\n    this.setState({tooltip: {\r\n      display: true,\r\n      data: {\r\n        key: e.target.getAttribute('data-key'),\r\n        value: e.target.getAttribute('data-value')\r\n      },\r\n      pos: {\r\n        x: e.target.getAttribute('cx'),\r\n        y: e.target.getAttribute('cy')\r\n      }\r\n    }});\r\n  }\r\n  hideTooltip(e) {\r\n    e.target.setAttribute('fill', '#7dc7f4')\r\n\r\n    this.setState({ tooltip: {\r\n      display: false,\r\n      data: {\r\n        key: '',\r\n        value: ''\r\n      },\r\n      pos: {}\r\n    } })\r\n  }\r\n\r\n  render() {\r\n    const { chartId, width, height, data } = this.props\r\n    const { tooltip } = this.state\r\n\r\n    const { h, x, y, w, transform } = this.getSparklineInfos(width, height, data)\r\n\r\n    const xAxis = d3.axisBottom(x)\r\n      .tickValues(data.map((d, i) => i > 0 ? d.date : null).splice(1))\r\n      .ticks(5)\r\n    const yAxis = d3.axisLeft(y)\r\n      .ticks(5)\r\n    const yGrid = d3.axisLeft(y)\r\n      .ticks(5)\r\n      .tickSizeInner(-w)\r\n      .tickFormat('' as any)\r\n\r\n    return (\r\n      <svg ref=\"Sparkline\" id={chartId} width={width} height={height} >\r\n        <g transform={transform}>\r\n          <path ref=\"pathSparkline\" className=\"line shadow\" strokeLinecap=\"round\"/>\r\n          <Dots data={data} x={x} y={y} showTooltip={this.showTooltip} hideTooltip={this.hideTooltip}/>\r\n          <Tooltip tooltip={tooltip}/>\r\n          <Grid grid={yGrid}/>\r\n          <Axis h={h} axis={yAxis} axisType=\"y\"/>\r\n          <Axis h={h} axis={xAxis} axisType=\"x\"/>\r\n        </g>\r\n      </svg>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n","import * as d3 from 'd3'\r\nimport * as React from 'react';\r\nimport * as classNames from 'classnames';\r\n\r\n\r\nimport {InsetShadow} from './'\r\n  type Props = {\r\n    chartId: any;\r\n    width: any;\r\n    height: any;\r\n    data: any;\r\n  }\r\n\r\n  type State = {\r\n    /* empty */\r\n  }\r\n\r\nexport class ProgressChart extends React.Component<Props| undefined, State> {\r\n  currentPercent:number;\r\n  constructor(props?: Props, context?: any) {\r\n    super(props, context);\r\n    this.currentPercent = 0\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const { width, height, data } = this.props\r\n    const outerRadius = (height / 2) - 10\r\n    const innerRadius = outerRadius - 20\r\n    const transform = 'translate(' + width / 2 + ',' + height / 2 + ')'\r\n\r\n    const style2 = { filter: 'url(#inset-shadow2)' }\r\n    const arcLine = d3.arc()\r\n        .innerRadius(innerRadius)\r\n        .outerRadius(outerRadius)\r\n        .cornerRadius(10)\r\n        .startAngle(-0.05)\r\n\r\n    let svg = d3.select(this.refs.ProgressChart as d3.BaseType)\r\n\r\n    let layout = svg\r\n      .select('g')\r\n      .attr('transform', transform)\r\n\r\n    let path: any = layout.selectAll('path.arcLine').data(data, 0 as any)\r\n\r\n    path.exit().remove()\r\n\r\n    path.enter().append('path')\r\n      .attr('fill', d => (d as any).color[1])\r\n      .attr('class', 'arcLine')\r\n      .attr('style', style2 as any)\r\n      .merge(path)\r\n        .transition().duration(2000)\r\n          .attrTween('d', d => {\r\n            let endAngle = (2 * Math.PI) * (d as any).percent\r\n            let interpolate = d3.interpolate({ endAngle: this.currentPercent }, { endAngle: endAngle }) as any;\r\n            this.currentPercent = endAngle\r\n            return function (t) {\r\n              return arcLine(interpolate(t))\r\n            }\r\n          })\r\n  }\r\n\r\n  render() {\r\n    const { chartId, width, height, data } = this .props\r\n\r\n    const styleText = { fontSize: '40px', fontColor: '#99d5e6' }\r\n    const style1 = { filter: 'url(#inset-shadow1)' }\r\n\r\n    const outerRadius = (height / 2) - 10\r\n    const innerRadius = outerRadius - 20\r\n\r\n    const arc = d3.arc()\r\n        .innerRadius(innerRadius)\r\n        .outerRadius(outerRadius)\r\n        .startAngle(0)\r\n        .endAngle(2 * Math.PI) as any;\r\n\r\n    return (\r\n        <div>\r\n          <svg ref=\"ProgressChart\" id={chartId} width={width} height={height}>\r\n            <g>\r\n              <InsetShadow chartId=\"inset-shadow1\" stdDeviation=\"15\" floodColor=\"black\" floodOpacity=\".5\"/>\r\n              <InsetShadow chartId=\"inset-shadow2\" stdDeviation=\"15\" floodColor=\"white\" floodOpacity=\".8\"/>\r\n              <circle r={innerRadius} cx=\"0\" cy=\"0\" fill={data[0].color[2]} fillOpacity=\"0.5\"/>\r\n              <text textAnchor=\"middle\" dy=\"15\" dx=\"5\" fill={d3.rgb((data[0] as any).color[1] as any).brighter(2).toString()} style={styleText}>\r\n                {Math.floor(data[0].percent * 100) + '%'}\r\n              </text>\r\n              <path className=\"backgroundProgress\" fill={data[0].color[0]} d={arc()} style={style1}/>\r\n            </g>\r\n          </svg>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\n","import * as d3 from 'd3'\r\nimport * as React from 'react';\r\nimport * as classNames from 'classnames';\r\n\r\n\r\ntype Props= {\r\n    chartId: any;\r\n    width: any;\r\n    height: any;\r\n    data: any;\r\n  }\r\n\r\n  type State ={\r\n    /* empty */\r\n  }\r\n\r\nexport class BarChart extends React.Component<Props, State> {\r\n\r\n  componentDidUpdate() {\r\n    const { width, height, data } = this.props\r\n\r\n    const margin = { top: 5, right: 5, bottom: 5, left: 5 },\r\n      h = height - (margin.top + margin.bottom)\r\n    const transform = 'translate(' + margin.left + ',' + margin.top + ')'\r\n\r\n    const x = d3.scaleBand()\r\n      .domain(data.map(d => {\r\n        return d.month\r\n      }))\r\n      .rangeRound([0, width])\r\n      .padding(0.5)\r\n    const y = d3.scaleLinear()\r\n      .domain([0, 100])\r\n      .rangeRound([height, 0])\r\n\r\n    // Select main SVG\r\n    let svg = d3.select(this.refs.BarChart as d3.BaseType)\r\n\r\n    let layout = svg\r\n      .select('g')\r\n      .attr('transform', transform)\r\n\r\n    let rect1:any = layout.selectAll('rect.behind').data(data)\r\n    let rect2:any = layout.selectAll('rect.shadow').data(data)\r\n\r\n    rect1.exit().remove()\r\n    rect2.exit().remove()\r\n\r\n    rect1.enter().append('rect')\r\n      .attr('fill', '#58657f')\r\n      .attr('rx', '3')\r\n      .attr('ry', '3')\r\n      .attr('class', 'behind')\r\n      .attr('key', (d, i) => 'behind-' + i)\r\n      .attr('y', (margin.top - margin.bottom))\r\n      .attr('height', h)\r\n      .merge(rect1)\r\n        .attr('x', d => x((d as any).month))\r\n        .attr('width', x.bandwidth())\r\n\r\n    rect2.enter().append('rect')\r\n      .attr('fill', '#74d3eb')\r\n      .attr('rx', '3')\r\n      .attr('ry', '3')\r\n      .attr('class', 'shadow')\r\n      .attr('key', (d, i) => 'shadow-' + i)\r\n      .attr('y', d => y((d as any).value) + (h - y((d as any).value)))\r\n      .attr('height', 0)\r\n      .merge(rect2)\r\n        .attr('x', d => x((d as any).month))\r\n        .attr('width', x.bandwidth())\r\n        .transition().duration(2000)\r\n          .attr('height', d => (h - y((d as any).value)))\r\n          .attr('y', d => y((d as any).value))\r\n  }\r\n\r\n  render() {\r\n    const { chartId, width, height } = this.props\r\n\r\n    return (\r\n      <svg ref=\"BarChart\" id={chartId} width={width} height={height}>\r\n        <g/>\r\n      </svg>\r\n    )\r\n  }\r\n}\r\n","import * as d3 from 'd3'\r\nimport * as React from 'react';\r\nimport * as classNames from 'classnames';\r\n\r\n\r\n  type Props = {\r\n    width: number;\r\n    height: any;\r\n    pie: any;\r\n    data:any;\r\n  }\r\n\r\n  type State = {\r\n    /* empty */\r\n  }\r\n\r\n\r\nexport class DonutChartPath extends React.Component<Props| undefined, State> {\r\n  currentData: any;\r\n  constructor(props?: Props, context?: any) {\r\n    super(props, context);\r\n    this.currentData = {};\r\n  }\r\n  componentDidUpdate() {\r\n    const { width, height, pie, data } = this.props\r\n\r\n    const outerRadius = height / 2\r\n    const innerRadius = height / 3.3\r\n    const legendDisplayed = (width <= (height + 180)) ? 0 : width / 5\r\n    const transform = 'translate(' + ((width / 2) - legendDisplayed) + ',' + (height / 2) + ')'\r\n\r\n    const arc = d3.arc().outerRadius(outerRadius).innerRadius(innerRadius)\r\n\r\n    let layout = d3.select(this.refs.DonutChartPath as d3.BaseType)\r\n      .attr('transform', transform)\r\n\r\n      let path:any = layout.selectAll('path').data(pie(data))\r\n\r\n      path.exit().remove()\r\n  \r\n      path.enter().append('path')\r\n        .attr('fill', d => (d as any).data.color)\r\n        .attr('key', (d, i) => i)\r\n        .each(d => this.currentData[(d as any).data.name] = { startAngle: (d as any).startAngle, endAngle: (d as any).startAngle })\r\n        .merge(path)\r\n          .transition().duration(2000)\r\n            .attrTween('d', d => {\r\n              let interpolate = d3.interpolate(this.currentData[(d as any).data.name], d) as any;\r\n              this.currentData[(d as any).data.name] = d\r\n              return function (t) {\r\n                return arc(interpolate(t))\r\n              }\r\n            })\r\n    }\r\n  \r\n    render() {\r\n      return <g ref=\"DonutChartPath\"/>\r\n    }\r\n  }\r\n  \r\n  ","import * as d3 from 'd3'\r\nimport * as React from 'react';\r\nimport * as classNames from 'classnames';\r\n\r\n\r\n  type Props = {\r\n    width: number;\r\n    height: any;\r\n    pie: any;\r\n    data:any;\r\n  }\r\n\r\n  type State= {\r\n    /* empty */\r\n  }\r\n\r\nexport class DonutChartLegend extends React.Component<Props, State> {\r\n\r\n  render() {\r\n    const {  width, height, pie, data } = this.props\r\n  // Responsive: don't show legend if too small\r\n  if (width <= (height + 180)) return null\r\n\r\n  const transform = 'translate(' + (width / 1.25) + ', 55)'\r\n\r\n  const legend = pie(data)\r\n    .map((d, i) => {\r\n      const trsf = 'translate(10,' + (i * 30) + ')'\r\n      const rectStyle = { fill: d.data.color, stroke: d.data.color }\r\n      const textStyle = { fill: d.data.color }\r\n\r\n      return (\r\n        <g transform={trsf} key={i}>\r\n          <rect width=\"20\" height=\"20\" style={rectStyle} rx=\"2\" ry=\"2\"/>\r\n          <text x=\"30\" y=\"15\" className=\"browser-legend\" style={textStyle}>{d.data.name}</text>\r\n        </g>\r\n      )\r\n    })\r\n\r\n  return (\r\n    <g transform={transform}>\r\n      {legend}\r\n    </g>\r\n  )\r\n  }\r\n}","import * as d3 from 'd3'\r\nimport * as React from 'react';\r\nimport {DonutChartPath} from './DonutChartPath'\r\nimport {DonutChartLegend} from './DonutChartLegend'\r\n\r\ntype Props = {\r\n  chartId: any;\r\n  width: any;\r\n  height: any;\r\n  data: any;\r\n}\r\n\r\ntype State = {}\r\n\r\nexport class DonutChart extends React.Component<Props, State> {\r\n\r\n  render() {\r\n    const { chartId, width, height, data } = this.props\r\n    const pie = d3.pie()\r\n      .value(d => (d as any).count)\r\n      .padAngle(0.04)\r\n      .sort(null)\r\n\r\n  return (\r\n      <svg\r\n        id={chartId}\r\n        width={width}\r\n        height={height}>\r\n        <DonutChartPath\r\n          width={width}\r\n          height={height}\r\n          pie={pie}\r\n          data={data}/>\r\n        <DonutChartLegend\r\n          pie={pie}\r\n          data={data}\r\n          width={width}\r\n          height={height}/>\r\n      </svg>\r\n    )\r\n  }\r\n}","\r\nexport class SparklineModel {\r\n    count : number;\r\n    date: Date;\r\n    constructor(count: number, date: Date){\r\n      this.count = count;\r\n      this.date = date;\r\n    }\r\n  }\r\n  ","import  React, { useRef, useState }  from 'react';\r\nimport { useFormInput } from '../../hooks';\r\nimport { BarChart, DonutChart, ProgressChart, Sparkline, SparklineModel } from '../controls/d3';\r\nimport './style.css';\r\nimport { EndpointConnectionFactory, IEndpointConnection } from '@macrix/pct-cmd';\r\nimport { HubConnectionState } from '@microsoft/signalr';\r\n\r\n\r\ntype Props = {\r\n  donutData: any;\r\n}\r\n\r\ntype State = {\r\n    widthSpark: number;\r\n    heightSpark: number;\r\n    widthDonut: number;\r\n    heightDonat: number;\r\n    widthProgress: number;\r\n    heightProgress: number;\r\n}\r\n\r\nexport const NeedsDashboard: React.FC = props => {\r\n  const ip = useFormInput('http://localhost:5009');\r\n  const [factory] = React.useState(new EndpointConnectionFactory());\r\n  const [endpointConnection, setEndpointConnection] = React.useState<IEndpointConnection>(null!);\r\n  const [connectionState, setConnectionState] = React.useState<HubConnectionState>(HubConnectionState.Disconnected);\r\n  const [logs, _setLogs] = React.useState<string[]>([]);\r\n  const inputCommand = useFormInput(`\r\n  {\r\n    \"CustomerName\": \"ProconTEL team\"\r\n  }`);\r\n  const stateRef = React.useRef(logs);\r\n  const setLogs = (data: string[]) => {\r\n      stateRef.current = data;\r\n      _setLogs(data);\r\n  };\r\n\r\n\r\n  const start = async () => {\r\n      const connection = factory.create(ip.value);\r\n      connection.onconnected(x => setConnectionState(connection.state));\r\n      connection.onclose(x => setConnectionState(connection.state));\r\n      connection.onreconnected(x => setConnectionState(connection.state));\r\n      connection.onreconnecting(x => setConnectionState(connection.state));\r\n      connection.onconnected(id => {\r\n          connection.off('onTemperature');\r\n          connection.on('onTemperature', (command) => {\r\n              setLogs([\r\n                  ...stateRef.current,\r\n                  `Received notification: ${JSON.stringify(command)}.`\r\n              ]);\r\n          });\r\n      });\r\n      try {\r\n          await connection.start();\r\n      }\r\n      catch (err) {\r\n          console.error(err);\r\n      }\r\n      setEndpointConnection(connection);\r\n  };\r\n\r\n  const stop = async () => {\r\n      await endpointConnection.stop();\r\n  };\r\n  const [sparklineSize, setSparklineSize] = React.useState({ \r\n    height: 300,\r\n    width: 400\r\n  })\r\n  const [donutchartSize, setDonutchartSize] = React.useState({ \r\n    height: 200,\r\n    width: 200\r\n  })\r\n  const [progresschartSize, setProgresschartSize] = React.useState({ \r\n    height: 200,\r\n    width: 200\r\n  })\r\n  const sparkline = useRef<HTMLDivElement>(null);\r\n  const donutchart = useRef<HTMLDivElement>(null);\r\n  const progresschart = useRef<HTMLDivElement>(null);\r\n  const handler = () => {\r\n\r\n  if(sparkline){\r\n    setSparklineSize({\r\n      width: sparkline.current.offsetWidth,\r\n      height: sparkline.current.offsetHeight - 100\r\n    });\r\n  }\r\n\r\n   if(donutchart){\r\n    setDonutchartSize({\r\n      width: donutchart.current.offsetWidth,\r\n      height: donutchart.current.offsetHeight - 100\r\n    });\r\n   }\r\n\r\n   if(progresschart){\r\n    setProgresschartSize({\r\n      width: progresschart.current.offsetWidth,\r\n      height: progresschart.current.offsetHeight - 100\r\n    });\r\n   }\r\n}\r\nReact.useEffect(() => {\r\n  handler();\r\n}, []);\r\n  React.useEffect(() => {\r\n    window.addEventListener('resize', handler);\r\n    return () => {\r\n      window.removeEventListener('resize', handler);\r\n    }\r\n  })\r\n    \r\n    const widgets = {\r\n      data:{\r\n        barchart:[\r\n          { month : \"Jan\", value : 31 },\r\n          { month : \"Feb\", value : 33 },\r\n          { month : \"Mar\", value : 45 },\r\n          { month : \"Apr\", value : 56 },\r\n          { month : \"May\", value : 35 },\r\n          { month : \"Jun\", value : 87 },\r\n          { month : \"Jul\", value : 54 },\r\n          { month : \"Aug\", value : 32 },\r\n          { month : \"Sep\", value : 65 },\r\n          { month : \"Oct\", value : 47 },\r\n          { month : \"Nov\", value : 64 },\r\n          { month : \"Dec\", value : 84 }\r\n        ],\r\n        progresschart:[\r\n          { percent : 1 / 100, color : [\"#0288D1\", \"#99d5e6\", \"#01579B\" ]}\r\n        ],\r\n        sparkline:[\r\n          new SparklineModel(4, new Date(\"2017-12-14\")),\r\n          new SparklineModel(7, new Date(\"2017-12-15\")),\r\n          new SparklineModel(12, new Date(\"2017-12-16\")),\r\n          new SparklineModel(9, new Date(\"2017-12-17\")),\r\n          new SparklineModel(8, new Date(\"2017-12-18\")),\r\n          new SparklineModel(1, new Date(\"2017-12-19\"))\r\n        ]\r\n      }\r\n    }\r\n    const printConnectionButton = () => (connectionState && connectionState === 'Disconnected' ?\r\n    (<button onClick={async (ev) => await start()}>Start</button>) :\r\n    (<button onClick={async (ev) => await stop()}>Stop</button>))\r\n\r\n    const renderConnection = () => {\r\n      return <> \r\n      <label>Endpoint IP:</label>\r\n      <div>\r\n          <input type=\"text\" name=\"name\" {...ip} disabled={connectionState === 'Connected'} />\r\n          {printConnectionButton()}\r\n      </div>\r\n      {connectionState}\r\n      <br></br>\r\n            <div className=\"terminal\">\r\n                {logs.map((item, idx) => (\r\n                    <pre key={idx}> {idx + 1}. {item}</pre>\r\n                ))}\r\n            </div>\r\n      </>\r\n  }\r\n\r\n    const renderWidgets = (widgets: any) => {\r\n        return <div className=\"column-stretch\">\r\n          <div className=\"widget column-stretch\" id=\"top-line-chart\" ref={sparkline} >\r\n            <h3 className=\"title\"> Observabletimeline</h3>\r\n              <Sparkline\r\n                        chartId=\"sparkline_1\"\r\n                        width={sparklineSize.width}\r\n                        height={sparklineSize.height}\r\n                        data={widgets.data.sparkline}/>\r\n          </div>\r\n          <div className=\"column-stretch\">\r\n            <div className=\"row-stretch\">\r\n              <div className=\"widget column-stretch\" id=\"browser\" ref={donutchart} >\r\n                <h3 className=\"title\"> Top5</h3>\r\n                  <DonutChart\r\n                          chartId=\"donutchart_1\"\r\n                          width={(donutchartSize.width > 40 ? donutchartSize.width - 40 : donutchartSize.width)}\r\n                          height={donutchartSize.height}\r\n                          data={[]}/>\r\n              </div>\r\n              <div className=\"widget column-stretch\" id=\"ret_visitors\" ref={progresschart} >\r\n                <h3 className=\"title\"> Effectiveness</h3>\r\n                <ProgressChart\r\n                          chartId=\"progresschart_1\"\r\n                          width={(progresschartSize.width > 40 ? progresschartSize.width - 40 : progresschartSize.width)}\r\n                          height={progresschartSize.height/2}\r\n                          data={widgets.data.progresschart}/>\r\n                        <br/>\r\n                        <BarChart\r\n                          chartId=\"barchart_1\"\r\n                          width={(progresschartSize.width > 40 ? progresschartSize.width - 40 : progresschartSize.width)}\r\n                          height={progresschartSize.height/2}\r\n                          data={widgets.data.barchart}/>\r\n              </div>\r\n            </div>  \r\n          </div>\r\n        </div>\r\n    }\r\n    return (\r\n    <>\r\n      <div className=\"main\">\r\n        {renderConnection()}\r\n        <div className=\"content\">\r\n          {renderWidgets(widgets) }\r\n        </div>\r\n      </div>\r\n    </>\r\n    );\r\n  }\r\n\r\n","import * as React from 'react';\r\nimport './style.css';\r\n\r\n\r\nexport class Dashboards extends React.Component  {\r\n  render() {\r\n    const { children } = this.props;\r\n    return (\r\n      <div className=\"main\">\r\n        <div className=\"content\">\r\n          {children}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { NeedsDashboard } from './components';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    // <div className=\"App\">\r\n    //   <header className=\"App-header\">\r\n    //     {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\r\n    //   </header>\r\n\r\n    // </div>\r\n    <div className=\"main\">\r\n    <div className=\"content\">\r\n    <NeedsDashboard />\r\n    </div>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}